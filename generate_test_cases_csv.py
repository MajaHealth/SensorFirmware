#!/usr/bin/env python3
"""
Generate test cases for SPI_DEV_servise and power_control_service in CSV format
"""

import csv
from datetime import datetime

def create_test_cases_csv():
    # Define column headers
    headers = ["Test ID", "Area", "Objective", "Linked IDs (Hazard/SRS/Task)",
               "Preconditions", "Steps", "Expected", "Dataset", "Priority",
               "Result", "Defect ID"]

    # SPI_DEV_servise test cases
    spi_tests = [
        ["SPI-001", "MAX30009 Communication", "Verify MAX30009 TCP server accepts connections on port 30009", "SRS-SPI-001", "SPI_DEV_servise running, network available", "1. Start SPI_DEV_servise\n2. Connect to localhost:30009 via telnet\n3. Verify connection established", "TCP connection established successfully, server ready to receive JSON commands", "N/A", "High", "", ""],
        ["SPI-002", "MAX30009 Data Acquisition", "Verify MAX30009 bioimpedance data streaming with I/Q samples", "SRS-SPI-002, HAZ-001", "MAX30009 initialized, sensor configured, hardware connected", "1. Send JSON start command to port 30009\n2. Configure frequency (25Hz-450kHz) and current (64μA-1.28mA)\n3. Start data acquisition\n4. Verify I/Q data FIFO buffering (max 30,000 samples)", "I/Q data stream received continuously, FIFO does not overflow, data format correct", "freq=100kHz, current=500μA", "Critical", "", ""],
        ["SPI-003", "MAX30009 Sync Marks", "Verify sync marks injected every 1 second with magic number -99999", "SRS-SPI-003", "MAX30009 streaming data", "1. Start MAX30009 data acquisition\n2. Monitor data stream for 60 seconds\n3. Count sync marks\n4. Verify magic number -99999 at sync positions", "Exactly 60 sync marks with value -99999, evenly spaced at 1-second intervals", "60 second capture", "High", "", ""],
        ["SPI-004", "MAX30009 Calibration", "Verify automated calibration system across 17 frequency points × 5 current levels", "SRS-SPI-004", "Calibration reference load connected, calib/ directory exists", "1. Send calibration start command\n2. Monitor calibration progress (85 total points)\n3. Verify JSON files created in calib/ with format {current_index}_{freq_index}.json\n4. Validate calibration data structure", "85 calibration files created successfully, data within expected ranges, no missing points", "Full calibration sweep", "High", "", ""],
        ["SPI-005", "ADS1293 Communication", "Verify ADS1293 TCP server accepts connections on port 1293", "SRS-SPI-005", "SPI_DEV_servise running, network available", "1. Start SPI_DEV_servise\n2. Connect to localhost:1293 via telnet\n3. Verify connection established", "TCP connection established successfully, server ready to receive JSON commands", "N/A", "High", "", ""],
        ["SPI-006", "ADS1293 ECG Acquisition", "Verify multi-channel ECG data acquisition and streaming", "SRS-SPI-006, HAZ-002", "ADS1293 initialized, ECG electrodes connected", "1. Send JSON start command to port 1293\n2. Configure ECG channels\n3. Start data acquisition\n4. Monitor data quality and continuity", "Multi-channel ECG data streamed continuously, no data gaps, signal quality acceptable", "3-lead ECG", "Critical", "", ""],
        ["SPI-007", "ADS1293 Sync Marks", "Verify ADS1293 sync marks align with MAX30009 sync marks", "SRS-SPI-007", "Both MAX30009 and ADS1293 streaming data simultaneously", "1. Start both sensors simultaneously\n2. Monitor both data streams for 60 seconds\n3. Compare sync mark timestamps\n4. Calculate time drift between sensors", "Sync marks aligned within ±10ms, sync counter increments match, drift < 100ms over 60 seconds", "60 second dual capture", "Critical", "", ""],
        ["SPI-008", "WS2812 LED Control", "Verify WS2812 LED control via TCP port 2812", "SRS-SPI-008", "SPI_DEV_servise running, WS2812 LEDs connected", "1. Connect to port 2812\n2. Send JSON command to set LED color (R=255, G=0, B=0)\n3. Verify LED illuminates red\n4. Test multiple colors and patterns", "LEDs respond correctly to color commands, no flickering, smooth transitions", "RGB test patterns", "Medium", "", ""],
        ["SPI-009", "JSON Request/Response", "Verify JSON request/response mechanism with atomic flags", "SRS-SPI-009", "Any TCP server running", "1. Send malformed JSON to server\n2. Send valid JSON request\n3. Monitor request_ready_flag and response_ready_flag\n4. Verify response JSON format", "Invalid JSON rejected gracefully, valid JSON processed, atomic flags work correctly, no race conditions", "Valid/invalid JSON samples", "High", "", ""],
        ["SPI-010", "Main Loop Timing", "Verify main loop executes with 500μs sleep without timing violations", "SRS-SPI-010", "SPI_DEV_servise running with all sensors active", "1. Start all three sensors simultaneously\n2. Monitor loop execution time with timestamps\n3. Calculate loop period statistics\n4. Check for timing jitter and delays", "Loop period ~500μs ± 50μs, no missed cycles, consistent timing under load", "10,000 loop iterations", "High", "", ""],
        ["SPI-011", "Concurrent Sensor Operation", "Verify all three sensors operate concurrently without interference", "SRS-SPI-011, HAZ-003", "All sensors connected and initialized", "1. Start MAX30009 data acquisition\n2. Start ADS1293 data acquisition\n3. Send WS2812 LED commands\n4. Monitor all data streams simultaneously for 5 minutes\n5. Check for data corruption or dropped samples", "All sensors operate independently, no data corruption, no resource conflicts, sync marks remain aligned", "5 minute concurrent operation", "Critical", "", ""],
        ["SPI-012", "SPI Bus Communication", "Verify SPI communication reliability for MAX30009 and ADS1293", "SRS-SPI-012", "SPI hardware drivers initialized", "1. Read/write test registers on both devices\n2. Verify data integrity with known patterns\n3. Test at maximum SPI clock speed\n4. Monitor for SPI errors in dmesg", "SPI read/write operations succeed 100%, no bit errors, no CRC failures", "1000 read/write cycles", "High", "", ""],
        ["SPI-013", "FIFO Buffer Management", "Verify MAX30009 FIFO buffer handles maximum 30,000 samples without overflow", "SRS-SPI-013, HAZ-004", "MAX30009 configured at highest sample rate", "1. Configure MAX30009 for maximum data rate\n2. Delay reading data to fill FIFO\n3. Monitor FIFO level\n4. Read data before overflow\n5. Verify no samples lost", "FIFO fills to 30,000 samples maximum, overflow flag triggers before data loss, all samples recovered", "Maximum rate test", "High", "", ""],
        ["SPI-014", "Service Restart Recovery", "Verify service gracefully restarts and recovers sensor state", "SRS-SPI-014", "Service running with active data acquisition", "1. Start data acquisition on all sensors\n2. Kill service with SIGTERM\n3. Restart service\n4. Verify sensor re-initialization\n5. Resume data acquisition", "Service shuts down cleanly, all resources released, restart successful, sensors re-initialize properly", "N/A", "Medium", "", ""],
        ["SPI-015", "Error Handling", "Verify error handling for sensor disconnection and SPI failures", "SRS-SPI-015, HAZ-005", "Service running normally", "1. Disconnect MAX30009 sensor during acquisition\n2. Monitor error messages and recovery\n3. Reconnect sensor\n4. Verify automatic recovery or manual restart needed", "Error detected and logged, service remains stable, clear error message to application, recovery possible", "Fault injection test", "High", "", ""]
    ]

    # power_control_service test cases
    pwr_tests = [
        ["PWR-001", "Power Control Communication", "Verify PWRCNTR TCP server accepts connections on port 501", "SRS-PWR-001", "power_control_servise running, network available", "1. Start power_control_servise\n2. Connect to localhost:501 via telnet\n3. Verify connection established", "TCP connection established successfully, server ready to receive JSON commands", "N/A", "High", "", ""],
        ["PWR-002", "GPIO Power Control", "Verify GPIO-based power control switches power domains correctly", "SRS-PWR-002, HAZ-006", "libgpiod configured, GPIO pins accessible", "1. Send JSON command to enable power domain\n2. Verify GPIO pin state using gpio-tools\n3. Measure voltage on power rail\n4. Send disable command\n5. Verify power off", "GPIO state changes correctly, power rail voltage correct (e.g., 3.3V/5V), power cycles cleanly", "Power on/off cycles", "Critical", "", ""],
        ["PWR-003", "Battery Monitoring", "Verify I2C battery status monitoring via SMBus", "SRS-PWR-003, HAZ-007", "Battery connected, I2C bus functional", "1. Send JSON request for battery status\n2. Verify voltage reading accuracy (±50mV)\n3. Verify current reading\n4. Verify state of charge (SOC) percentage\n5. Verify temperature reading", "Battery voltage accurate, SOC matches expected value, temperature reasonable (15-40°C), data refreshes every 3 seconds", "Battery at 50% SOC", "Critical", "", ""],
        ["PWR-004", "Battery Reading Throttle", "Verify battery reading throttled to every 3 seconds", "SRS-PWR-004", "Service running, battery monitoring active", "1. Enable timestamp logging for battery reads\n2. Monitor I2C transactions for 60 seconds\n3. Count number of battery reads\n4. Verify timing between reads", "Battery read exactly every 3 seconds (±100ms), approximately 20 reads in 60 seconds", "60 second monitoring", "Medium", "", ""],
        ["PWR-005", "Button Input Handling", "Verify button input processed correctly with debouncing", "SRS-PWR-005", "Button connected to GPIO, service running", "1. Press button briefly (<100ms)\n2. Press button long (>1s)\n3. Rapidly press button multiple times\n4. Monitor button event reporting via JSON", "Short press detected, long press detected, no double-triggers from bounce, events reported accurately", "Button press patterns", "High", "", ""],
        ["PWR-006", "Buzzer Control", "Verify buzzer control with different patterns and durations", "SRS-PWR-006", "Buzzer connected, service running", "1. Send JSON command for single beep (100ms)\n2. Send command for double beep pattern\n3. Send command for continuous tone (1s)\n4. Test buzzer disable command", "Buzzer responds accurately to all patterns, timing precise (±10ms), can be interrupted", "Buzzer test patterns", "Medium", "", ""],
        ["PWR-007", "Main Loop Timing", "Verify main loop executes with 100ms sleep without timing violations", "SRS-PWR-007", "Service running with all features active", "1. Enable timestamp logging in main loop\n2. Monitor loop execution time for 60 seconds\n3. Calculate loop period statistics\n4. Check for timing jitter", "Loop period ~100ms ± 10ms, consistent timing, no significant delays", "600 loop iterations", "Medium", "", ""],
        ["PWR-008", "JSON Request/Response", "Verify JSON communication with atomic flags and thread safety", "SRS-PWR-008", "Service running", "1. Send concurrent JSON requests from multiple clients\n2. Send malformed JSON\n3. Send valid requests rapidly\n4. Monitor request/response flags", "Thread-safe operation, no race conditions, invalid JSON rejected, all valid requests processed in order", "Concurrent requests", "High", "", ""],
        ["PWR-009", "I2C Communication Reliability", "Verify SMBus/I2C communication handles errors gracefully", "SRS-PWR-009, HAZ-008", "I2C bus functional", "1. Disconnect battery during active monitoring\n2. Monitor I2C error handling\n3. Reconnect battery\n4. Verify recovery\n5. Check error logging", "I2C timeout detected, error logged, service remains stable, automatic recovery when battery reconnected", "Fault injection", "High", "", ""],
        ["PWR-010", "Low Battery Handling", "Verify low battery detection and notification", "SRS-PWR-010, HAZ-009", "Battery at <10% SOC or use battery simulator", "1. Monitor battery SOC\n2. Drain battery to <10%\n3. Verify low battery notification sent\n4. Check critical battery threshold (<5%)\n5. Verify shutdown sequence initiated", "Low battery warning at 10%, critical warning at 5%, notification sent via JSON, graceful shutdown initiated", "Low battery scenario", "Critical", "", ""],
        ["PWR-011", "Power Sequencing", "Verify correct power-up and power-down sequencing", "SRS-PWR-011, HAZ-010", "All power domains available", "1. Send power-up command\n2. Monitor GPIO timing with oscilloscope\n3. Verify power rail sequencing\n4. Send power-down command\n5. Verify reverse sequencing", "Power rails enable in correct order with proper delays, power-down sequence is reverse of power-up, no voltage spikes", "Oscilloscope capture", "Critical", "", ""],
        ["PWR-012", "Concurrent Operations", "Verify button, buzzer, and battery monitoring work concurrently", "SRS-PWR-012", "All peripherals connected", "1. Start battery monitoring\n2. Press button while buzzer active\n3. Monitor all features simultaneously for 5 minutes\n4. Verify no interference", "All features work independently, no missed button presses, battery reads continue, buzzer unaffected", "5 minute test", "High", "", ""],
        ["PWR-013", "Service Restart Recovery", "Verify service restarts cleanly and restores power state", "SRS-PWR-013", "Service running with power enabled", "1. Enable power domains\n2. Kill service with SIGTERM\n3. Verify power state maintained by hardware\n4. Restart service\n5. Verify state synchronization", "Service shuts down cleanly, power state preserved or safely restored, no GPIO conflicts on restart", "N/A", "High", "", ""],
        ["PWR-014", "Temperature Monitoring", "Verify battery temperature monitoring and over-temperature protection", "SRS-PWR-014, HAZ-011", "Battery with temperature sensor", "1. Monitor normal temperature (20-30°C)\n2. Heat battery to 45°C (use controlled environment)\n3. Verify over-temperature warning\n4. Heat to 50°C\n5. Verify shutdown initiated", "Temperature read accurately (±2°C), warning at 45°C, shutdown at 50°C, notification sent to application", "Temperature sweep", "Critical", "", ""],
        ["PWR-015", "Inter-Service Communication", "Verify power_control_servise can coordinate with SPI_DEV_servise", "SRS-PWR-015, SRS-SPI-016", "Both services running", "1. Send power enable to power_control_servise\n2. Verify SPI_DEV_servise detects power and initializes sensors\n3. Send low battery command\n4. Verify SPI_DEV_servise receives notification and saves data\n5. Coordinate shutdown", "Services communicate through application layer, coordinated startup/shutdown, data preserved on low battery", "Integration test", "High", "", ""]
    ]

    # Generate filenames with timestamp
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    spi_filename = f"SPI_DEV_servise_Test_Cases_{timestamp}.csv"
    pwr_filename = f"power_control_service_Test_Cases_{timestamp}.csv"

    # Write SPI_DEV_servise test cases
    with open(spi_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(spi_tests)
    print(f"SPI_DEV_servise test cases created: {spi_filename}")

    # Write power_control_service test cases
    with open(pwr_filename, 'w', newline='', encoding='utf-8') as f:
        writer = csv.writer(f)
        writer.writerow(headers)
        writer.writerows(pwr_tests)
    print(f"power_control_service test cases created: {pwr_filename}")

    return spi_filename, pwr_filename

if __name__ == "__main__":
    create_test_cases_csv()
